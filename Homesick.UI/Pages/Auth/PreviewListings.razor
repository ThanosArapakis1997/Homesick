@page "/preview"

<MudAlert Severity="Severity.Normal">
    <MudText Typo="Typo.body2">Αγγελίες</MudText>
</MudAlert>
<MudDataGrid Items="@listings" Loading="_loading">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Ιδιοκτήτης" />
        <PropertyColumn Property="x => x.House.Address" Title="Διεύθυνση" />
        <PropertyColumn Property="x => x.House.Area" Title="Περιοχή" />
        <PropertyColumn Property="x => x.House.ConstructionYear" Title="Έτος Κατασκευής" />
        <PropertyColumn Property="x => x.House.Price" Title="Τιμή" />
        <PropertyColumn Property="x => x.Status" Title="Κατάσταση" />
        <TemplateColumn>
            <CellTemplate>
                <MudButton Size="@Size.Small" OnClick="@context.Actions.StartEditingItemAsync" Href=@($"/listing/preview/{context.Item.ListingId}")>Επισκόπηση</MudButton>
            </CellTemplate>

        </TemplateColumn>
        <TemplateColumn>           
            <CellTemplate>
                @if (context.Item.Status == SD.StatusInReview)
                {
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton>Διαχείριση</MudButton>
                        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                            <MudMenuItem OnClick="() => ApproveListing(context.Item.ListingId)" Color="Color.Primary">Έγκριση</MudMenuItem>
                            <MudMenuItem OnClick="() => DeleteItemAsync(context.Item)">Απόρριψη</MudMenuItem>                            
                        </MudMenu>
                    </MudButtonGroup>
                }
            </CellTemplate>
        </TemplateColumn>

    </Columns>
</MudDataGrid>

@code {
    private List<ListingDto> listings = new List<ListingDto>();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        ResponseDto response = await listingService.GetAllListings();

        if (response != null && response.IsSuccess) listings = JsonConvert.DeserializeObject<List<ListingDto>>(Convert.ToString(response.Result));
        else Snackbar.Add(response.Message);

        _loading = false;
    }

    private async Task ApproveListing(int id)
    {
        ResponseDto response = await listingService.UpdateListingStatus(id, SD.StatusApproved);

        if (response != null && response.IsSuccess)
        {
            Snackbar.Add("Listing approved successfully", Severity.Success);
            listings.RemoveAll(l => l.ListingId == id);
        }
        else
        {
            Snackbar.Add("Error approving listing", Severity.Error);
        }
    }

    private async Task DeleteItemAsync(ListingDto listing)
    {
        var parameters = new DialogParameters<ConfirmationDialog> { { x => x.Listing, listing } };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Διαγραφή Αγγελίας", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ResponseDto response = await listingService.DeleteListing(listing.ListingId);
            if (response.IsSuccess)
            {
                Snackbar.Add("Η αγγελία διαγράφηκε επιτυχώς!", Severity.Success);
                listings.Remove(listing);
            }
            else
            {
                Snackbar.Add("Η διαγραφή απέτυχε!", Severity.Error);
            }
        }
    }

}
