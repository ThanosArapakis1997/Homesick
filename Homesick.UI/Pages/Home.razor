@page "/"
@using System.Security.Claims

<MudImage Src="images/BackgroundImage.jpg" ObjectFit=ObjectFit.Cover Style="height: 500px; width: 100%; position: absolute; top: 0; left: 0;" Alt="HomepageImage" />

<MudForm Model="@model" Style="margin-top: 55vh; align-self:center">
    <MudGrid Justify="Justify.Center" Spacing="2">
        <MudItem xs="12" md="2">
            <MudAutocomplete @bind-Value="model.Area"
            SearchFunc="Search"
            Label="Περιοχή"
            Placeholder="Περιοχή"
            Clearable="true" />
        </MudItem>

        <MudItem xs="7" md="2">
            <MudInputLabel>Τιμή</MudInputLabel>
            <MudButton Variant="Variant.Text" Color="Color.Default" @onclick="TogglePriceDropdown">
                Από - Έως
            </MudButton>

            <MudCollapse Expanded="showPriceDropdown">
                <MudSelect T="double?" @bind-Value="model.LowPrice" Label="Ελάχιστη Τιμή">
                    <MudSelectItem T="double?" Value="@(null)">Αδιάφορο</MudSelectItem>
                    <MudSelectItem T="double?" Value="10000">10.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="20000">20.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="30000">30.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="40000">40.000</MudSelectItem>
                </MudSelect>

                <MudSelect T="double?" @bind-Value="model.HighPrice" Label="Μέγιστη Τιμή">
                    <MudSelectItem T="double?" Value="@(null)">Αδιάφορο</MudSelectItem>
                    <MudSelectItem T="double?" Value="10000">10.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="20000">20.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="30000">30.000</MudSelectItem>
                    <MudSelectItem T="double?" Value="40000">40.000</MudSelectItem>
                </MudSelect>
            </MudCollapse>
        </MudItem>

        <MudItem xs="7" md="2">
            <MudInputLabel>Εμβαδόν (τ.μ.)</MudInputLabel>
            <MudButton Variant="Variant.Text" Color="Color.Transparent" @onclick="ToggleFloorAreaDropdown">
                Από - Έως
            </MudButton>
            <MudCollapse Expanded="showFloorAreaDropdown">
                <MudSelect T="int?" @bind-Value="model.FloorAreaLow" Label="Ελάχιστη Τιμή">
                    <MudSelectItem T="int?" Value="@(null)">Αδιάφορο</MudSelectItem>
                    <MudSelectItem T="int?" Value=" 30">30</MudSelectItem>
                    <MudSelectItem T="int?" Value=" 50">50</MudSelectItem>
                    <MudSelectItem T="int?" Value="70">70</MudSelectItem>
                    <MudSelectItem T="int?" Value="100">100</MudSelectItem>
                </MudSelect>

                <MudSelect T="int?" @bind-Value="model.FloorAreaHigh" Label="Μέγιστη Τιμή">
                    <MudSelectItem T="int?" Value="@(null)">Αδιάφορο</MudSelectItem>
                    <MudSelectItem T="int?" Value="30">30</MudSelectItem>
                    <MudSelectItem T="int?" Value="50">50</MudSelectItem>
                    <MudSelectItem T="int?" Value="70">70</MudSelectItem>
                    <MudSelectItem T="int?" Value="100">100</MudSelectItem>
                </MudSelect>
            </MudCollapse>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="HandleSubmit">
                Αναζήτηση
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@if (authState is not null && authState.User.Identity?.IsAuthenticated == true)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="py-8">

        <MudPaper Elevation="1" Class="pa-4 mb-6">
            <MudText Typo="Typo.h5" Class="mb-1">Γειά σου, @authState.User.FindFirst("name")?.Value</MudText>
            <MudDivider/>
            <br />
            <MudText Typo="Typo.h6" Class="mb-4"><b>Οι αγγελίες σου</b></MudText>

            <MudGrid Spacing="3">
                @foreach(ListingDto item in listings)
                {
                    <MudItem xs="12" sm="6" md="6" lg="4">
                        <MudCard Elevation="5" Class="h-100">
                            <MudCardMedia Image="@item.House.Images.FirstOrDefault()?.Data" Height="200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="mb-2">@item.House.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">@item.House.Area</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Primary">@item.House.Price.ToString("C")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Href=@($"/listing/preview/{item.ListingId}") Class="ml-auto">Λεπτομέρειες</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }                                          
            </MudGrid>
        </MudPaper>
    </MudContainer>
}


@code {
    private FilterDto model = new FilterDto();

    private bool showPriceDropdown = false;
    private bool showFloorAreaDropdown = false;
    private List<string> _areas = SD.Areas;
    private AuthenticationState authState;
    private List<ListingDto> listings = new List<ListingDto>();

    private void TogglePriceDropdown()
    {
        showPriceDropdown = !showPriceDropdown;
    }

    private void ToggleFloorAreaDropdown()
    {
        showFloorAreaDropdown = !showFloorAreaDropdown;
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _areas;

        return _areas.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task HandleSubmit()
    {
        ResponseDto response = await listingService.GetFilteredListings(model);

        if (response != null && response.IsSuccess)
        {
            List<ListingDto> FilteredListings = JsonConvert.DeserializeObject<List<ListingDto>>(Convert.ToString(response.Result));

            // Store data in the shared service
            FilteredListingsService.SetListingsData(FilteredListings);

            // Navigate to FilteredListings
            Navigation.NavigateTo("filtered-listings");
        }
        else
        {
            Snackbar.Add(response?.Message ?? "An error occurred", Severity.Warning);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            string userId = user.FindFirst("sub")?.Value;
            ResponseDto response = await listingService.GetUserListings(userId);

            listings = JsonConvert.DeserializeObject<List<ListingDto>>(Convert.ToString(response.Result));
        }
    }
}
