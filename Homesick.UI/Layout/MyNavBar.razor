@inject CustomAuthStateProvider _authenticationStateProvider;

<MudAppBar Color="Color.Primary">
    <MudImage Src="images/Housing_logo.jpg" Width="50" Height="50" Alt="Logo" Elevation="25" Class="rounded-lg ma-4" />
    <MudButton Color="Color.Dark" Href="/"  Class="mr-4">
        <MudText Typo="Typo.h6">Homesick</MudText>
    </MudButton>
    <MudSpacer />
    @if (authState is not null && authState.User.Identity?.IsAuthenticated == true)
    {
        <MudButton Variant="Variant.Outlined" Href="/listing/create">Καταχώριση Αγγελίας</MudButton>
        <MudMenu Dense Variant="Variant.Text" Size="Size.Large" Color="Color.Inherit" Icon="@Icons.Material.Filled.Face4">

            @if (role.Equals(SD.RoleCustomer, StringComparison.CurrentCultureIgnoreCase))
            {
                <MudMenuItem Href="/profile" Icon="@Icons.Material.TwoTone.SwitchAccount" IconColor="Color.Primary" Label="Προφίλ" />
            }

            <MudMenuItem Icon="@Icons.Material.TwoTone.Logout" OnClick="Logout" IconColor="Color.Primary" Label="Αποσύνδεση" />
        </MudMenu>

        @if (role.Equals(SD.RoleAdmin, StringComparison.CurrentCultureIgnoreCase))
        {
            <MudMenu Dense Variant="Variant.Text" Size="Size.Medium" Color="Color.Inherit" Icon="@Icons.Material.TwoTone.MoreVert">
                <MudMenuItem Href="/preview" Icon="@Icons.Material.TwoTone.Preview" IconColor="Color.Primary" Label="Επισκόπηση Αγγελιών" />
                <MudMenuItem Href="/logger" Icon="@Icons.Material.TwoTone.AdminPanelSettings" IconColor="Color.Primary" Label="Logs" />
            </MudMenu>
        }
    }
    else
    {
        <MudMenu Dense Variant="Variant.Text" Size="Size.Large" Color="Color.Inherit" Icon="@Icons.Material.Filled.Face4">
            <MudMenuItem Href="/login" Icon="@Icons.Material.TwoTone.Login" IconColor="Color.Primary" Label="Είσοδος" />
            <MudMenuItem Href="/register" Icon="@Icons.Material.TwoTone.PersonAdd" IconColor="Color.Primary" Label="Εγγραφή" />

        </MudMenu>
    }   
</MudAppBar>

@code {

    private AuthenticationState authState;
    private string role = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AuthenticationStateProvider.AuthenticationStateChanged += async (task) =>
        {
            authState = await task;

            var user = authState.User;

            if (user.Identity.IsAuthenticated) role = user.FindFirst("role")?.Value;
            else role = string.Empty;
            StateHasChanged(); // Forces the navbar to update
        };
        StateHasChanged();       
        
    }

    private async Task Logout()
    {
        _authenticationStateProvider.NotifyUserLogout();

        Navigation.NavigateTo("/");
    }
}